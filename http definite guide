Chapter-1

When you browse to a page, such as "http://www.oreilly.com/index.html," your browser sends an
HTTP request to the server www.oreilly.com (see Figure 1-1). The server tries to find the desired
object (in this case, "/index.html") and, if successful, sends the object to the client in an HTTP
response, along with the type of the object, the length of the object, and other information

Web servers host web resources they can be static files or oftware programs that
generate content on demand

1.3.1 Media Types

Because the Internet hosts many thousands of different data types, HTTP carefully tags each object
being transported through the Web with a data format label called a MIME type.

A MIME type is a textual label, represented as a primary object type and a specific subtype, separated
by a slash.

An HTML-formatted text document would be labeled with type text/html .

A plain ASCII text document would be labeled with type text/plain .

A JPEG version of an image would be image/jpeg .

A GIF-format image would be image/gif .

An Apple QuickTime movie would be video/quicktime .

A Microsoft PowerPoint presentation would be application/vnd.ms-
powerpoint .


1.3.2 URIs

URIsare like the postal
addresses of the Internet, uniquely identifying and locating information resources around the world.

Given the URI, HTTP can retrieve the object

URIs come in two flavors, called
URLs and URNs.

1.3.3 URLs

The uniform resource locator (URL) is the most common form of resource identifier. URLs describe
the specific location of a resource on a particular server. They tell you exactly how to fetch a resource
from a precise,



1.3.4 URNs

The second flavor of URI is the uniform resource name, or URN. A URN serves as a unique name for
a particular piece of content, independent of where the resource currently resides. These location-
independent URNs allow resources to move from place to place. URNs also allow resources to be
accessed by multiple network access protocols while maintaining the same name


URN might be used to name the Internet standards document "RFC 2141"
regardless of where it resides (it may even be copied in several places): urn:ietf:rfc:2141

To work effectively, URNs need a supporting
infrastructure to resolve resource locations; the lack of such an infrastructure has also slowed their
adoption


1.4.1 Methods

HTTP method Description

GET         Send named resource from the server to the client.

PUT         Store data from client into a named server resource.

DELETE      Delete the named resource from a server.

POST        Send client data into a server gateway application.

HEAD        Send just the HTTP headers from the response for the named resource.


1.4.2 Status Codes
The status code is a three-digit numeric
code that tells the client if the request succeeded, or if other actions are required

200 OK document returned correctly
302 Redirect, Go to some other place to get the resource.
404 Not Found, can't find the resource.


1.4.3 Web Pages Can Consist of Multiple Objects

An application often issues multiple HTTP transactions to accomplish a task

a web browser issues a cascade of HTTP transactions to fetch and display a graphics-rich web page.

Example:
The browser performs one transaction to fetch the HTML "skeleton" that describes the page layout,
Then issues additional HTTP transactions for each embedded image, graphics pane, Java applet, etc
These embedded resousece might reside on different servers.
Thus, a "webpage" often is a collection of resources, not a single resource

HTTP messages consist of three parts:

Start line
The first line of the message is the start line, indicating what to do for a request or what
happened for a response.

Header fields
Zero or more header fields follow the start line
Each header field consists of a name and avalue, separated by a colon (:) for easy parsing.
The headers end with a blank line. Adding a header field is as easy as adding another line.


Body
After the blank line is an optional message body containing any kind of data. Request bodies
carry data to the web server; response bodies carry data back to the client. Unlike the start
lines and headers, which are textual and structured, the body can contain arbitrary binary data
(e.g., images, videos, audio tracks, software applications). Of course, the body can also
contain text.


When we type and enter
http://www.joes-hardware.com/tools.html

GET /tools.html HTTP/1.0
User-agent: XXXXX
Accept: text/html, image/gif, image/jpeg
Accept-language: en

The response body length is noted in the Content-Length header,
document's MIME type is noted in the Content-Type header.


1.6.3 A Real Example Using Telnet

The Telnet utility connects your keyboard to a destination TCP port and connects the TCP port output
back to your display screen.

Telnet is commonly used for remote terminal sessions, but it can generally connect to any TCP server, including HTTP servers.

You can use the Telnet utility to talk directly to web servers ,Telnet lets you open a TCP connection to
a port on a machine and type characters directly into the port. The web server treats you as a web
client, and any data sent back on the TCP connection is displayed onscreen.


1.7 Protocol Versions

HTTP/0.9
The 1991 prototype, supports only GET method and does not support any MIME typea and HTTP headers.

HTTP/1.0 added version numbers, HTTP headers, additional methods, and multimedia object handling.

HTTP/1.0+
including long-lasting "keep-alive" connections, virtual hosting support, andproxy connection support, were added to HTTP and became unofficial, de facto standards.

HTTP/1.1 focused on correcting architectural flaws in the design of HTTP, specifying
semantics, introducing significant performance optimizations, and removing mis-features.


1.8 Architectural Components of the Web

Proxies
HTTP intermediaries that sit between clients and servers

Caches
HTTP storehouses that keep copies of popular web pages close to clients

Gateways
Special web servers that connect to other applications

Tunnels
Special proxies that blindly forward HTTP communications

Agents
Semi-intelligent web clients that make automated HTTP requests



1.8.1 Proxies


a proxy sits between a client and a server, receiving all of the client's HTTP
requests and relaying the requests to the server (perhaps after modifying the requests). These
applications act as a proxy for the user, accessing the server on the user's behalf.


Proxies are often used for security, acting as trusted intermediaries through which all web traffic
flows. Proxies can also filter requests and responses;

for example, to detect application viruses in
corporate downloads or to filter adult content away from elementary-school students.


1.8.2 Caches

A web cache or caching proxy is a special type of HTTP proxy server that keeps copies of popular
documents that pass through the proxy. The next client requesting the same document can be served
from the cache's personal copy

1.8.3 Gateways(indirection)

Gateways are special servers that act as intermediaries for other servers. They are often used to
convert HTTP traffic to another protocol.

A gateway always receives requests as if it was the origin server for the resource.
The client may not be aware it is communicating with a gateway.

Tunnels are HTTP applications that, after setup, blindly relay raw data between two connections.

User agents (or just agents) are client programs that make HTTP requests on the user's behalf. Any
application that issues web requests is an HTTP agent.

These automated agents often have colorful names, such as "spiders"

Chapter 2. URLs and Resources

Uniform resource locators (URLs) are the standardized names for the Internet's resources. URLs point
to pieces of electronic information, telling you where they are located and how to interact with them.


Say you want to fetch the URL http://www.joes-hardware.com/seasonal/index-fall.html:

• The first part of the URL (http) is the URL scheme. The scheme tells a web client how to
access the resource. In this case, the URL says to use the HTTP protocol.

• The second part of the URL (www.joes-hardware.com) is the server location. This tells the
web client where the resource is hosted.

• The third part of the URL (/seasonal/index-fall.html) is the resource path. The path tells what
particular local resource on the server is being requested.



URL Shortcuts:

Relative URL:

1. Absolute
2. Relative 

Abosolute URL has all the information that u need to access a resource.

Relative URL are incomplete. To gel all the information needed to access a
resource from the relative URL, we must convert the relative URL to another URL 
Called as Base.

Relative URL are a convenient shorthand notation for the URL's 


http://www.joes-hardware.com/tools.html

tool.html

<HTML>
<HEAD></HEAD>
<BODY>
<A href="./hammers.html">
</BODY>
</HTML>

here we have a hyperlink containing the URL ./hammers.html this URL seems to be 
incomplete but its is compeltely legitimate.

It can be interpreted relative to the URL of the document in which it is found;
in this case, relative to the resource /tools.html on the Joe's Hardware web server.

http://www.joes-hardware.com/tools.html
Using this URL as a base, we can infer the missing information. We know the resource is
./hammers.html, but we don't know the scheme or host. Using the base URL, we can infer that the
scheme is http and the host is www.joes-hardware.com


algorithm converts a relative URL to its absolute form, which can then be used to reference the
resource. This algorithm was originally specified in RFC 1808 and later incorporated into RFC 2396.


2.3.2 Expandomatic URLs

Some browsers try to expand the URL's automatically after u submit the URL or while u are typing

Hostname expansion:

For example if you type "yahoo" in the address box, your browser can automatically insert
"www." and ".com" onto the hostname, creating "www.yahoo.com

History expansion:

Another technique that browsers use to save you time typing URLs is to store a history of the
URLs that you have visited in the past

So, if you were typing in the start of a URL that you had visited previously, such as
http://www.joes-, your browser could suggest http://www.joes-hardware.com.

Shady Characters:

URLs were designed to be portable. They were also designed to uniformly name all the resources on
the Internet, which means that they will be transmitted through various protocols.


Escape sequences allow the encoding of arbitrary character values or data using a restricted subset of the US-ASCII character set,
yielding portability and completeness.


2.4.2 Encoding Mechanisms
The encoding simply represents the unsafe character
by an "escape" notation, consisting of a percent sign (%) followed by two hexadecimal digits that
represent the ASCII code of the character

~ 126 (0x7E) http://www.joes-hardware.com/%7Ejo

Currently, and for the foreseeable future, URLs are the way to name resources on the Internet. They
are everywhere, and they have proven to be a very important part of the Web's success. It will be a
while before any other naming scheme unseats URLs. However, URLs do have their limitations, and
it is likely that


CHAPTER-3:
You'll know most of what you need to know to write your own HTTP applications.

The terms "inbound," "outbound," "upstream," and "downstream" describe message direction.

Messages Commute Inbound to the Origin Server

Messages travel inbound to the origin server,
and when their work is done, they travel outbound back to the user agent
 
The start line and headers are just ASCII text,
broken up by lines.
Each line ends with a two-character end-of-line sequence, consisting of a carriage return (ASCII 13) and a line-feed character (ASCII 10).
This end-of-line sequence is written "CRLF." It is worth pointing out that while the HTTP
specification for terminating lines is CRLF, robust applications also should accept just a line-feed
character. Some older or broken HTTP applications do not always send both the carriage return and
line feed

the body can contain text or binary data or can be empty.

Here's the format for a request message:
<method> <request-URL> <version>
<headers>
<entity-body>

Here's the format for a response message (note that the syntax differs only in the start line):
<version> <status> <reason-phrase>
<headers>
<entity-body>


headers
Zero or more headers, each of which is a name, followed by a colon ( : ), followed by optional
whitespace, followed by a value, followed by a CRLF. 
The headers are terminated by a blank ine (CRLF), marking the end of the list of headers 
and the beginning of the entity body. Some versions of HTTP, such as HTTP/1.1, require certain headers to be present for the
request or response message to be vali


3.2.2 Start Lines
All HTTP messages begin with a start line. The start line for a request message says what to do. The
start line for a response message says what happened.

PUT VS POST

GET get the document from the server. NO MSG BODY
HEAD get the headers for a document form the server NO MSG BODY
POST Send the data to the server for processing MSG BODY
PUT Store the data of the request on the server MSG BODY
TRACE Trace the message through proxy servers to the server NO MSG BODY
OPTIONS Determine what methods can operate on the server NO MSG BODY
DELETE Remove the docuemnt from the server NO MSG BODY


Status codes

100-199 Informational
200-299 Successful
300-399 Redirection
400-499 Client error
500-599 Server error

3.2.2.6 Version numbers
Version numbers are intended to provide application speaking HTTP with a clue about
each others capability and format of message, An HTTP version 1.2 application communicating with an HTTP 1.1 applicaton
should know that it should not use any new 1.2 features, as they likely not implemented by the 
application speaking the older version of the protocol.

The version number indicates the highest version of HTTP that an application supports. In some cases
this leads to confusion between applications, [2] because HTTP/1.0 applications interpret a response
with HTTP/1.1 in it to indicate that the response is a 1.1 response, when in fact that's just the level of
protocol used by the responding application.


3.3 Methods

Note that not all methods are implemented by every server, A server need to implement 
only the GET and HEAD methods for its resources.

Http  defines a set of methods call safe methods. The GET and HEAD methods are said to
be sage, meaning that no action should occur as a result of an HTTP request and uses either 
The get or head method.

HEAD method.
Server developers must ensure that headers returned are exactly those that a GET request
would return.

PUT:
Writing documents on the server. Opposite of GET.
The semantics of the PUT methods are for the server to take the body of the requestand either to use it
to create a new document name requested by the URL or if that URL already exist use the body to replace it.


Because PUT allows you to changes the content, Many webservers required you to login in 
with a password before you can perform a PUT.

POST:
it is used to send input data to the server

TRACE:
When a client makes a request , that request may have to travel through firewalls,proxies,
gateways or other apps Each of these has a oppurchunity to modify the original 
HTTP request. The Trace method allows clients to see how its request looks when its finally makes it to the server.

OPTIONS:
ask the server to tell us about the various supported capabilites of the webserver.
You can ask a server about what methods its supports in general or for particual resources.

DELETE:
it asks the server to delete the resources,specified by the request URL, client applications is 
not guaranteed that the delete is carried out. This is because the HTTP specification allows
the server to ovverdide the request without telling the client.

Headers:

General Heders:
they procive very basic information about the message.
Date header indicate when the msg was constructed.
Connection,Date,MIME-Version...etc.

Request Headers:
They are specific to request messages. They provide extra information to the servers.
such as type of data the client is willing to accept.
Who is sending the request,
HOST: Gives the hostname and port of the server to which the request is sent.

  Accept headers;
  Conditional Request headers
  RequestSecurityHeaders
    HTTP natively supports a simply challenge/response authentication schem for requests, 
    it attepts to make transactions slightly more secure by requiring the clients to authenticate
    themselves before geting access to certail resouces.
  Proxy Request Headers

Response Headers:
They have their own set of headers that provide information the client.
Ex: What type of server the client is taking to 
Server: Tiki-Hut/1.0
   Negotiation Headers
  

Entity-Headers:
they refer with headers that deal with the entity body.
example: tell the type of data in entity body.
Content-Type:
  ContentHeaders
  EntityCachingHeaders


Extension headers are created by the application developers.







